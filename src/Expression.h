/*
 * Expression.h
 *
 *  Created on: Apr 2, 2016
 *      Author: santiago
 */

#ifndef EXPRESSION_H_
#define EXPRESSION_H_

#include "List.h"

/**
 * My elements will always be strings.
 * This means if you create
 * (list 1 2 3 4) and evaluate this expression
 * return will be (eg) : new ArrayList<String>({ "1", "2", "3", "4" })
 *
 * If later we need to make the Element more complex, we will have to change it into
 * an own class
 */
typedef std::string Element;

class Expression { //This should have a protected "Other expressions" for the custom ones if they already exist and are used here. @investigate interface
	private:
		List<Expression> environment;

	public:
		Expression(List<Expression> ); //Let it be autogenerated, we dont have to set anything here
		virtual ~Expression();
		virtual std::string getTag();
		virtual void parse(std::string line, void *params);
		virtual List<Element> evaluate();
};

#endif /* EXPRESSION_H_ */
